(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{702:function(t,s,a){"use strict";a.r(s);var e=a(29),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes-安装前的准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-安装前的准备"}},[t._v("#")]),t._v(" Kubernetes 安装前的准备"),a("Badge",{attrs:{text:"v1.20.0",type:"success"}})],1),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("官方文档")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装 kubeadm"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 kubeadm 创建集群"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"前提条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前提条件"}},[t._v("#")]),t._v(" 前提条件")]),t._v(" "),a("p",[t._v("本次部署教程采用 Ubuntu 版本安装 kubernetes 集群环境，集群节点为 1 主 2 从模式，服务器（或虚拟机）基本要求，如下：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("OS")]),t._v("：Ubuntu 18.04.5 LTS")]),t._v(" "),a("li",[a("strong",[t._v("CPU")]),t._v("：最低要求，1 CPU 2 核")]),t._v(" "),a("li",[a("strong",[t._v("内存")]),t._v("：最低要求，2GB")]),t._v(" "),a("li",[a("strong",[t._v("磁盘")]),t._v("：最低要求，20GB")]),t._v(" "),a("li",[a("strong",[t._v("网络")]),t._v("：可以访问外网，且集群中的所有机器的网络可以相互通信")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("基于CentOS 7 部署K8S教程")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/pages/b2e7fa/"}},[t._v("请点击这里")])],1)]),t._v(" "),a("h2",{attrs:{id:"部署目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署目标"}},[t._v("#")]),t._v(" 部署目标")]),t._v(" "),a("p",[t._v("如下图，给出了本章要部署的目标集群的基本环境，它拥有一个Master节点和两个Node节点。各Node主机的配置方式基本相同。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/2021-05-18_17-23-33.png",alt:"kubernetes集群部署目标示意图"}})]),t._v(" "),a("p",[t._v("各主机上采用的容器运行时环境为Docker，为Pod提供网络功能的CNI是calico，它运行为托管于Kubernetes之上的Pod对象，另外，基础附件还包括CoreDNS用于名称解析和服务发现。")]),t._v(" "),a("h2",{attrs:{id:"环境介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境介绍"}},[t._v("#")]),t._v(" 环境介绍")]),t._v(" "),a("p",[t._v("操作系统、容器引擎及Kubernetes的相关版本如下：")]),t._v(" "),a("ul",[a("li",[t._v("OS: Ubuntu 18.04.5 LTS")]),t._v(" "),a("li",[t._v("Container runtime: Docker CE 20.10.0")]),t._v(" "),a("li",[t._v("Kubernetes: v1.20")])]),t._v(" "),a("p",[t._v("创建三台虚拟机，分别命名如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("主机名")]),t._v(" "),a("th",[t._v("IP地址")]),t._v(" "),a("th",[t._v("角色")]),t._v(" "),a("th",[t._v("OS")]),t._v(" "),a("th",[t._v("配置")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("k8s-master1")]),t._v(" "),a("td",[t._v("192.168.31.101")]),t._v(" "),a("td",[t._v("master")]),t._v(" "),a("td",[t._v("Ubuntu 18.04.5")]),t._v(" "),a("td",[t._v("2核2G")])]),t._v(" "),a("tr",[a("td",[t._v("k8s-node1")]),t._v(" "),a("td",[t._v("192.168.31.102")]),t._v(" "),a("td",[t._v("worker")]),t._v(" "),a("td",[t._v("Ubuntu 18.04.5")]),t._v(" "),a("td",[t._v("2核2G")])]),t._v(" "),a("tr",[a("td",[t._v("k8s-node2")]),t._v(" "),a("td",[t._v("192.168.31.103")]),t._v(" "),a("td",[t._v("worker")]),t._v(" "),a("td",[t._v("Ubuntu 18.04.5")]),t._v(" "),a("td",[t._v("2核2G")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("无特殊说明以下操作在所有节点执行")])]),t._v(" "),a("h2",{attrs:{id:"修改主机名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改主机名"}},[t._v("#")]),t._v(" 修改主机名")]),t._v(" "),a("p",[t._v("在同一局域网中主机名不应该相同，所以我们需要做修改。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#master节点:")]),t._v("\nhostnamectl set-hostname k8s-master\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#node1节点：")]),t._v("\nhostnamectl set-hostname k8s-node1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#node2节点:")]),t._v("\nhostnamectl set-hostname k8s-node2\n")])])]),a("h2",{attrs:{id:"修改-etc-hosts文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-etc-hosts文件"}},[t._v("#")]),t._v(" 修改/etc/hosts文件")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /etc/hosts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF\n192.168.31.101 k8s-master\n192.168.31.102 k8s-node1\n192.168.31.103 k8s-node2\nEOF")]),t._v("\n")])])]),a("h2",{attrs:{id:"配置时间同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置时间同步"}},[t._v("#")]),t._v(" 配置时间同步")]),t._v(" "),a("p",[t._v("使用chrony同步时间，配置master节点与网络NTP服务器同步时间，所有node节点与master节点同步时间。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" ntpdate  \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ntpdate ntp.aliyun.com\n")])])]),a("h2",{attrs:{id:"关闭swap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭swap"}},[t._v("#")]),t._v(" 关闭swap")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("swapoff -a\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yes")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" /etc/fstab /etc/fstab_bak\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/fstab_bak "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -v swap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /etc/fstab\n")])])]),a("p",[t._v("使用free -h命令检查配置是否生效")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@k8s-master etc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# free -h   ")]),t._v("\ntotal        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),t._v("      shared  buff/cache   available\nMem:           "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".8G        142M        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".5G        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(".5M        122M        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(".5G\nSwap:            0B          0B          0B\n")])])]),a("h2",{attrs:{id:"允许-iptables-检查桥接流量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#允许-iptables-检查桥接流量"}},[t._v("#")]),t._v(" 允许 iptables 检查桥接流量")]),t._v(" "),a("p",[t._v("确保 br_netfilter 模块被加载。这一操作可以通过运行 lsmod | grep br_netfilter 来完成。若要显式加载该模块，可执行 sudo modprobe br_netfilter。")]),t._v(" "),a("p",[t._v("为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 sysctl 配置中将 net.bridge.bridge-nf-call-iptables 设置为 1。例如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/modules-load.d/k8s.conf")]),t._v("\nbr_netfilter\nEOF")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/sysctl.d/k8s.conf")]),t._v("\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("sysctl --system\n")])])]),a("p",[t._v("更多的相关细节可查看"),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#network-plugin-requirements",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络插件需求"),a("OutboundLink")],1),t._v("页面。")]),t._v(" "),a("h2",{attrs:{id:"检查所需端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查所需端口"}},[t._v("#")]),t._v(" 检查所需端口")]),t._v(" "),a("h3",{attrs:{id:"控制平面节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制平面节点"}},[t._v("#")]),t._v(" 控制平面节点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("协议")]),t._v(" "),a("th",[t._v("方向")]),t._v(" "),a("th",[t._v("端口范围")]),t._v(" "),a("th",[t._v("作用")]),t._v(" "),a("th",[t._v("使用者")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("6443")]),t._v(" "),a("td",[t._v("Kubernetes API 服务器")]),t._v(" "),a("td",[t._v("所有组件")])]),t._v(" "),a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("2379-2380")]),t._v(" "),a("td",[t._v("etcd 服务器客户端 API")]),t._v(" "),a("td",[t._v("kube-apiserver, etcd")])]),t._v(" "),a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("10250")]),t._v(" "),a("td",[t._v("Kubelet API")]),t._v(" "),a("td",[t._v("kubelet 自身、控制平面组件")])]),t._v(" "),a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("10251")]),t._v(" "),a("td",[t._v("kube-scheduler")]),t._v(" "),a("td",[t._v("kube-scheduler 自身")])]),t._v(" "),a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("10252")]),t._v(" "),a("td",[t._v("kube-controller-manager")]),t._v(" "),a("td",[t._v("kube-controller-manager 自身")])])])]),t._v(" "),a("h3",{attrs:{id:"工作节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作节点"}},[t._v("#")]),t._v(" 工作节点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("协议")]),t._v(" "),a("th",[t._v("方向")]),t._v(" "),a("th",[t._v("端口范围")]),t._v(" "),a("th",[t._v("作用")]),t._v(" "),a("th",[t._v("使用者")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("10250")]),t._v(" "),a("td",[t._v("Kubelet API")]),t._v(" "),a("td",[t._v("kubelet 自身、控制平面组件")])]),t._v(" "),a("tr",[a("td",[t._v("TCP")]),t._v(" "),a("td",[t._v("入站")]),t._v(" "),a("td",[t._v("30000-32767")]),t._v(" "),a("td",[t._v("NodePort 服务†")]),t._v(" "),a("td",[t._v("所有组件")])])])]),t._v(" "),a("p",[t._v("† "),a("a",{attrs:{href:"https://kubernetes.io/zh/docs/concepts/services-networking/service/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NodePort 服务"),a("OutboundLink")],1),t._v(" 的默认端口范围。")]),t._v(" "),a("p",[t._v("使用 * 标记的任意端口号都可以被覆盖，所以你需要保证所定制的端口是开放的。")]),t._v(" "),a("p",[t._v("虽然控制平面节点已经包含了 etcd 的端口，你也可以使用自定义的外部 etcd 集群，或是指定自定义端口。")]),t._v(" "),a("p",[t._v("你使用的 Pod 网络插件 (见下) 也可能需要某些特定端口开启。由于各个 Pod 网络插件都有所不同， 请参阅他们各自文档中对端口的要求。")]),t._v(" "),a("h2",{attrs:{id:"安装docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装docker"}},[t._v("#")]),t._v(" 安装Docker")]),t._v(" "),a("p",[t._v("在每个节点上，根据"),a("a",{attrs:{href:"https://docs.docker.com/engine/install/#server",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装 Docker 引擎"),a("OutboundLink")],1),t._v(" 为你的 Linux 发行版安装 Docker。 你可以在此文件中找到最新的经过验证的 Docker 版本 "),a("a",{attrs:{href:"https://git.k8s.io/kubernetes/build/dependencies.yaml",target:"_blank",rel:"noopener noreferrer"}},[t._v("依赖关系"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("Step 1 : 安装必要的一些系统工具")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" apt-transport-https ca-certificates "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" software-properties-common\n")])])]),a("p",[t._v("Step 2 : 安装GPG证书")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" apt-key "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -\n")])])]),a("p",[t._v("Step 3 : 写入软件源信息")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" add-apt-repository "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu '),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("lsb_release -cs"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(' stable"')]),t._v("\n")])])]),a("p",[t._v("Step 4 : 更新并安装v19.03.0版的Docker-CE")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" docker-ce"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":19.03.0~3-0~ubuntu-bionic docker-ce-cli"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(":19.03.0~3-0~ubuntu-bionic containerd.io -y\n")])])]),a("p",[t._v("Step 5 ：配置 Docker 守护程序，尤其是使用 systemd 来管理容器的 cgroup，配置镜像加速")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("EOF"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" /etc/docker/daemon.json")]),t._v('\n{\n  "exec-opts": ["native.cgroupdriver=systemd"],\n  "log-driver": "json-file",\n  "log-opts": {\n    "max-size": "100m"\n  },\n  "storage-driver": "overlay2",\n  "registry-mirrors": ["https://registry.cn-beijing.aliyuncs.com"]\n}\nEOF')]),t._v("\n")])])]),a("p",[t._v("Step 6 ：重新启动 Docker 并在启动时启用")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),a("p",[t._v("Step 7 ： 建立 docker 用户组"),a("Badge",{attrs:{text:"可选"}})],1),t._v(" "),a("p",[t._v("默认情况下，"),a("code",[t._v("docker")]),t._v(" 命令会使用 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Unix_domain_socket",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unix socket"),a("OutboundLink")],1),t._v(" 与 Docker 引擎通讯。而只有 "),a("code",[t._v("root")]),t._v(" 用户和 "),a("code",[t._v("docker")]),t._v(" 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 "),a("code",[t._v("root")]),t._v(" 用户。因此，更好地做法是将需要使用 "),a("code",[t._v("docker")]),t._v(" 的用户加入 "),a("code",[t._v("docker")]),t._v(" 用户组。")]),t._v(" "),a("p",[t._v("切换到普通用户，将当前用户加入 "),a("code",[t._v("docker")]),t._v(" 组：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v("\n")])])]),a("p",[a("strong",[t._v("退出当前终端并重新登录")]),t._v("，进行如下测试。")])])}),[],!1,null,null,null);s.default=r.exports}}]);