(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{689:function(e,a,r){"use strict";r.r(a);var s=r(29),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"微服务持续集成-下"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#微服务持续集成-下"}},[e._v("#")]),e._v(" 微服务持续集成(下)")]),e._v(" "),r("h2",{attrs:{id:"jenkins-docker-springcloud部署方案优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-docker-springcloud部署方案优化"}},[e._v("#")]),e._v(" Jenkins+Docker+SpringCloud部署方案优化")]),e._v(" "),r("p",[e._v("上面部署方案存在的问题：")]),e._v(" "),r("p",[e._v("1）一次只能选择一个微服务部署")]),e._v(" "),r("p",[e._v("2）只有一台生产者部署服务器")]),e._v(" "),r("p",[e._v("3）每个微服务只有一个实例，容错率低")]),e._v(" "),r("p",[e._v("优化方案：")]),e._v(" "),r("p",[e._v("1）在一个Jenkins工程中可以选择多个微服务同时发布")]),e._v(" "),r("p",[e._v("2）在一个Jenkins工程中可以选择多台生产服务器同时部署")]),e._v(" "),r("p",[e._v("3）每个微服务都是以集群高可用形式部署")]),e._v(" "),r("h2",{attrs:{id:"jenkins-docker-springcloud集群部署流程说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-docker-springcloud集群部署流程说明"}},[e._v("#")]),e._v(" Jenkins+Docker+SpringCloud集群部署流程说明")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125307.jpg",alt:""}})]),e._v(" "),r("h2",{attrs:{id:"修改所有微服务配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修改所有微服务配置"}},[e._v("#")]),e._v(" 修改所有微服务配置")]),e._v(" "),r("p",[e._v("注册中心配置(*)")]),e._v(" "),r("h2",{attrs:{id:"设计jenkins集群项目的构建参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计jenkins集群项目的构建参数"}},[e._v("#")]),e._v(" 设计Jenkins集群项目的构建参数")]),e._v(" "),r("p",[e._v("1）安装Extended Choice Parameter插件")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125651.jpg",alt:""}})]),e._v(" "),r("p",[e._v("支持多选框")]),e._v(" "),r("p",[e._v("2）创建流水线项目")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125720.jpg",alt:""}})]),e._v(" "),r("p",[e._v("3）添加参数")]),e._v(" "),r("p",[e._v("字符串参数：分支名称")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125750.jpg",alt:""}})]),e._v(" "),r("p",[e._v("多选框：项目名称")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125816.jpg",alt:""}})]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125842.jpg",alt:""}})]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("tensquare_eureka_server@10086,tensquare_zuul@10020,tensquare_admin_service@9001,\ntensquare_gathering@9002\n")])])]),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125919.jpg",alt:""}})]),e._v(" "),r("p",[e._v("最后效果：")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_125946.jpg",alt:""}})]),e._v(" "),r("p",[e._v("完成微服务构建镜像，上传私服")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//gitlab的凭证\ndef git_auth = \"68f2087f-a034-4d39-a9ff-1f776dd3dfa8\"\n//构建版本的名称\ndef tag = \"latest\"\n//Harbor私服地址\ndef harbor_url = \"192.168.66.102:85\"\n//Harbor的项目名称\ndef harbor_project_name = \"tensquare\"\n//Harbor的凭证\ndef harbor_auth = \"ef499f29-f138-44dd-975e-ff1ca1d8c933\"\nnode {\n//把选择的项目信息转为数组\ndef selectedProjects = \"${project_name}\".split(',')\nstage('Checkout') {\ncheckout([$class: 'GitSCM', branches: [[name: '*/${branch}']],\ndoGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],\nuserRemoteConfigs: [[credentialsId: '${git_auth}', url:\n'git@192.168.66.100:itheima_group/tensquare_back_cluster.git']]])\n} s\ntage('代码审查') {\ndef scannerHome = tool 'sonarqube-scanner'\nwithSonarQubeEnv('sonarqube6.7.4') {\nfor(int i=0;i<selectedProjects.size();i++){\n//取出每个项目的名称和端口\ndef currentProject = selectedProjects[i];\n//项目名称\ndef currentProjectName = currentProject.split('@')[0]\n//项目启动端口\ndef currentProjectPort = currentProject.split('@')[1]\nsh \"\"\"\ncd ${currentProjectName}\n${scannerHome}/bin/sonar-scanner\n\"\"\"\necho \"${currentProjectName}完成代码审查\"\n}\n}\n} s\ntage('编译，构建镜像，部署服务') {\n//编译并安装公共工程\nsh \"mvn -f tensquare_common clean install\"\nfor(int i=0;i<selectedProjects.size();i++){\n//取出每个项目的名称和端口\ndef currentProject = selectedProjects[i];\n//项目名称\ndef currentProjectName = currentProject.split('@')[0]\n//项目启动端口\ndef currentProjectPort = currentProject.split('@')[1]\n//定义镜像名称\ndef imageName = \"${currentProjectName}:${tag}\"\n//编译，构建本地镜像\nsh \"mvn -f ${currentProjectName} clean package\ndockerfile:build\"\n//给镜像打标签\nsh \"docker tag ${imageName}\n${harbor_url}/${harbor_project_name}/${imageName}\"\n//登录Harbor，并上传镜像\nwithCredentials([usernamePassword(credentialsId:\n\"${harbor_auth}\", passwordVariable: 'password', usernameVariable: 'username')])\n{\n//登录\nsh \"docker login -u ${username} -p ${password}\n${harbor_url}\"\n//上传镜像\nsh \"docker push\n${harbor_url}/${harbor_project_name}/${imageName}\"\n} /\n/删除本地镜像\nsh \"docker rmi -f ${imageName}\"\nsh \"docker rmi -f\n${harbor_url}/${harbor_project_name}/${imageName}\"\n//=====以下为远程调用进行项目部署========\n//sshPublisher(publishers: [sshPublisherDesc(configName:\n'master_server', transfers: [sshTransfer(cleanRemote: false, excludes: '',\nexecCommand: \"/opt/jenkins_shell/deployCluster.sh $harbor_url\n$harbor_project_name $currentProjectName $tag $currentProjectPort\", execTimeout:\n120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,\npatternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,\nremovePrefix: '', sourceFiles: '')], usePromotionTimestamp: false,\nuseWorkspaceInPromotion: false, verbose: false)])\necho \"${currentProjectName}完成编译，构建镜像\"\n}\n}\n}\n")])])]),r("h2",{attrs:{id:"完成微服务多服务器远程发布"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完成微服务多服务器远程发布"}},[e._v("#")]),e._v(" 完成微服务多服务器远程发布")]),e._v(" "),r("p",[e._v("1）配置远程部署服务器")]),e._v(" "),r("p",[e._v("拷贝公钥到远程服务器")]),e._v(" "),r("p",[e._v("ssh-copy-id 192.168.66.104")]),e._v(" "),r("p",[e._v("系统配置->添加远程服务器")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_130105.jpg",alt:""}})]),e._v(" "),r("p",[e._v("2）修改Docker配置信任Harbor私服地址")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('{ "\nregistry-mirrors": ["https://zydiol88.mirror.aliyuncs.com"],\n"insecure-registries": ["192.168.66.102:85"]\n}\n')])])]),r("p",[e._v("重启Docker")]),e._v(" "),r("p",[e._v("3）添加参数")]),e._v(" "),r("p",[e._v("多选框：部署服务器")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_130201.jpg",alt:""}})]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_130222.jpg",alt:""}})]),e._v(" "),r("p",[e._v("最终效果：")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_130252.jpg",alt:""}})]),e._v(" "),r("p",[e._v("4）修改Jenkinsfile构建脚本")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('//gitlab的凭证\ndef git_auth = "68f2087f-a034-4d39-a9ff-1f776dd3dfa8"\n//构建版本的名称\ndef tag = "latest"\n//Harbor私服地址\ndef harbor_url = "192.168.66.102:85"\n//Harbor的项目名称\ndef harbor_project_name = "tensquare"\n//Harbor的凭证\ndef harbor_auth = "ef499f29-f138-44dd-975e-ff1ca1d8c933"\nnode {\n//把选择的项目信息转为数组\ndef selectedProjects = "${project_name}".split(\',\')\n//把选择的服务区信息转为数组\ndef selectedServers = "${publish_server}".split(\',\')\nstage(\'Checkout\') {\ncheckout([$class: \'GitSCM\', branches: [[name: \'*/${branch}\']],\ndoGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],\nuserRemoteConfigs: [[credentialsId: \'${git_auth}\', url:\n\'git@192.168.66.100:itheima_group/tensquare_back_cluster.git\']]])\n}\nstage(\'代码审查\') {\ndef scannerHome = tool \'sonarqube-scanner\'\nwithSonarQubeEnv(\'sonarqube6.7.4\') {\nfor(int i=0;i<selectedProjects.size();i++){\n//取出每个项目的名称和端口\ndef currentProject = selectedProjects[i];\n//项目名称\ndef currentProjectName = currentProject.split(\'@\')[0]\n//项目启动端口\ndef currentProjectPort = currentProject.split(\'@\')[1]\nsh """\ncd ${currentProjectName}\n${scannerHome}/bin/sonar-scanner\n"""\necho "${currentProjectName}完成代码审查"\n}\n}\n} s\ntage(\'编译，构建镜像，部署服务\') {\n//编译并安装公共工程\nsh "mvn -f tensquare_common clean install"\nfor(int i=0;i<selectedProjects.size();i++){\n//取出每个项目的名称和端口\ndef currentProject = selectedProjects[i];\n//项目名称\ndef currentProjectName = currentProject.split(\'@\')[0]\n//项目启动端口\ndef currentProjectPort = currentProject.split(\'@\')[1]\n//定义镜像名称\ndef imageName = "${currentProjectName}:${tag}"\n//编译，构建本地镜像\nsh "mvn -f ${currentProjectName} clean package\ndockerfile:build"\n//给镜像打标签\nsh "docker tag ${imageName}\n${harbor_url}/${harbor_project_name}/${imageName}"\n//登录Harbor，并上传镜像\nwithCredentials([usernamePassword(credentialsId:\n"${harbor_auth}", passwordVariable: \'password\', usernameVariable: \'username\')])\n{\n//登录\nsh "docker login -u ${username} -p ${password}\n${harbor_url}"\n//上传镜像\nsh "docker push\n${harbor_url}/${harbor_project_name}/${imageName}"\n}\n//删除本地镜像\nsh "docker rmi -f ${imageName}"\nsh "docker rmi -f\n${harbor_url}/${harbor_project_name}/${imageName}"\n//=====以下为远程调用进行项目部署========\nfor(int j=0;j<selectedServers.size();j++){\n//每个服务名称\ndef currentServer = selectedServers[j]\n//添加微服务运行时的参数：spring.profiles.active\ndef activeProfile = "--spring.profiles.active="\nif(currentServer=="master_server"){\nactiveProfile = activeProfile+"eureka-server1"\n}else if(currentServer=="slave_server1"){\nactiveProfile = activeProfile+"eureka-server2"\n} s\nshPublisher(publishers: [sshPublisherDesc(configName:\n"${currentServer}", transfers: [sshTransfer(cleanRemote: false, excludes: \'\',\nexecCommand: "/opt/jenkins_shell/deployCluster.sh $harbor_url\n$harbor_project_name $currentProjectName $tag $currentProjectPort\n$activeProfile", execTimeout: 120000, flatten: false, makeEmptyDirs: false,\nnoDefaultExcludes: false, patternSeparator: \'[, ]+\', remoteDirectory: \'\',\nremoteDirectorySDF: false, removePrefix: \'\', sourceFiles: \'\')],\nusePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])\n} e\ncho "${currentProjectName}完成编译，构建镜像"\n}\n}\n}\n')])])]),r("p",[e._v("5）编写deployCluster.sh部署脚本")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" /bin/sh\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#接收外部参数")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("harbor_url")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("harbor_project_name")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$2")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("project_name")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$3")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("tag")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$4")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("port")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$5")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("profile")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$6")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("imageName")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$harbor_url")]),e._v("/"),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$harbor_project_name")]),e._v("/"),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$project_name")]),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$tag")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$imageName")]),e._v('"')]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#查询容器是否存在，存在则删除")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("containerId")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" -a "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -w $"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("project_name"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(":$"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("tag"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $1}'")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$containerId")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#停掉容器")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" stop "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$containerId")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#删除容器")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$containerId")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"成功删除容器"')]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#查询镜像是否存在，存在则删除")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("imageId")]),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token variable"}},[r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" images "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -w $project_name "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $3}'")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$imageId")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#删除镜像")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" rmi -f "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$imageId")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"成功删除镜像"')]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 登录Harbor私服")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" login -u itcast -p Itcast123 "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$harbor_url")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下载镜像")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$imageName")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动容器")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -di -p "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$port")]),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$port")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$imageName")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$profile")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"容器启动成功"')]),e._v("\n")])])]),r("p",[e._v("6）集群效果")]),e._v(" "),r("h2",{attrs:{id:"nginx-zuul集群实现高可用网关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nginx-zuul集群实现高可用网关"}},[e._v("#")]),e._v(" Nginx+Zuul集群实现高可用网关")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_130520.jpg",alt:""}})]),e._v(" "),r("p",[e._v("1）安装Nginx（已完成）")]),e._v(" "),r("p",[e._v("2）修改Nginx配置")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[e._v("vi")]),e._v(" /etc/nginx/nginx.conf\n")])])]),r("p",[e._v("内容如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("upstream zuulServer{\nserver 192.168.66.103:10020 weight=1;\nserver 192.168.66.104:10020 weight=1;\n}\nserver {\nlisten 85 default_server;\nlisten [::]:85 default_server;\nserver_name _;\nroot /usr/share/nginx/html;\n# Load configuration files for the default server block.\ninclude /etc/nginx/default.d/*.conf;\nlocation / {\n### 指定服务器负载均衡服务器\nproxy_pass http://zuulServer/;\n}\n}\n\n")])])]),r("p",[e._v("3）重启Nginx： systemctl restart nginx")]),e._v(" "),r("p",[e._v("4）修改前端Nginx的访问地址")]),e._v(" "),r("p",[r("img",{attrs:{src:"/img/2021-07-01_130651.jpg",alt:""}})])])}),[],!1,null,null,null);a.default=t.exports}}]);