(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{697:function(t,e,s){"use strict";s.r(e);var a=s(29),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"docker客户端使用tls保护连接远程docker服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker客户端使用tls保护连接远程docker服务"}},[t._v("#")]),t._v(" Docker客户端使用TLS保护连接远程Docker服务")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("参考"),s("a",{attrs:{href:"https://docs.docker.com/engine/security/protect-access/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方教程"),s("OutboundLink")],1),t._v("实现通过自定义证书对远程Docker主机的安全访问和控制。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/262150629_86976.png",alt:"Docker"}})]),t._v(" "),s("h2",{attrs:{id:"服务器环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器环境"}},[t._v("#")]),t._v(" 服务器环境")]),t._v(" "),s("ul",[s("li",[t._v("Ubuntu 20.04 LTS focal")]),t._v(" "),s("li",[t._v("Docker Version Server: Docker Engine - Community Engine:Version：20.10.3")])]),t._v(" "),s("h2",{attrs:{id:"docker服务端-客户端和ca证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker服务端-客户端和ca证书"}},[t._v("#")]),t._v(" Docker服务端,客户端和CA证书")]),t._v(" "),s("p",[t._v("默认情况下，Docker通过非联网的Unix套接字运行。它还可以选择使用HTTP套接字进行通信。")]),t._v(" "),s("p",[t._v("这里有三个角色,"),s("strong",[t._v("Docker服务端")]),t._v("和"),s("strong",[t._v("Docker客户端")]),t._v("和"),s("strong",[t._v("CA签名的证书")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Docker服务端")]),t._v("：对应运行Docker守护程序的主机\n"),s("ul",[s("li",[t._v("通过开放端口(一般为2376)支持远程连接")]),t._v(" "),s("li",[t._v("通过指定"),s("strong",[t._v("tlsverify")]),t._v("标志并将Docker的"),s("strong",[t._v("tlscacert")]),t._v("标志指向"),s("strong",[t._v("可信的CA证书")]),t._v("来启用"),s("strong",[t._v("TLS")]),t._v("以实现安全访问(仅允许由该CA签名的证书进行身份验证的客户端连接)")])])]),t._v(" "),s("li",[s("strong",[t._v("Docker客户端")]),t._v("：即默认情况下的Docker主机\n"),s("ul",[s("li",[t._v("当使用证书连接时,仅能连接到具有该CA签名的证书的服务器")])])]),t._v(" "),s("li",[s("strong",[t._v("CA签名的证书")]),t._v(" "),s("ul",[s("li",[t._v("作用：服务端和客户端证书都只对应一份信任列表，信任列表里是服务端的信息(如ip或域名等等)，服务端持有服务端证书，仅接受持有客户端证书的主机访问(这里可以再加上其他的限制,详情见下文)")])])])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("ul",[s("li",[t._v("Docker服务端也可以不开启TLS验证，不过这样子很不安全，生产环境下应当尽量避免。如果只是试验性的，可以指定关闭TLS验证,但只对特定主机开放，方法见后文"),s("code",[t._v("/etc/docker/daemon.json")]),t._v("配置相关")]),t._v(" "),s("li",[t._v("如果Docker服务端没有开启TLS验证，则Docker客户端不需要使用证书连接。但如果客户端不使用证书连接开启了TLS验证的服务端，则会报错,如下:")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("Get http://远程主机ip:2376/v1.38/version: net/http: HTTP/1.x transport connection broken: malformed HTTP response "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x15"}},[t._v("\\x15")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x03"}},[t._v("\\x03")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x01"}},[t._v("\\x01")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x00"}},[t._v("\\x00")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x02"}},[t._v("\\x02")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x02"}},[t._v("\\x02")]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n* Are you trying to connect to a TLS-enabled daemon without TLS?\n")])])]),s("ul",[s("li",[t._v("如果Docker客户端连接时使用的证书内不含目的主机的信息,则会提示对方主机不在证书信任列表内,访问失败")])])]),t._v(" "),s("h2",{attrs:{id:"使用openssl创建ca和服务端密钥key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用openssl创建ca和服务端密钥key"}},[t._v("#")]),t._v(" 使用OpenSSL创建CA和服务端密钥key")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("将以下示例中的所有"),s("code",[t._v("$HOST")]),t._v("实例替换为Docker守护程序主机的域名或IP地址")])]),t._v(" "),s("p",[t._v("以下步骤在"),s("strong",[t._v("Docker服务端")]),t._v("进行:")]),t._v(" "),s("h3",{attrs:{id:"步骤1-生成ca私钥ca-key-pem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤1-生成ca私钥ca-key-pem"}},[t._v("#")]),t._v(" 步骤1:生成CA私钥ca-key.pem")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("ca-key.pem是一个临时文件，最后可以删除。")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl genrsa -aes256 -out ca-key.pem "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n")])])]),s("p",[t._v("例子如下，需要设置密码并验证（"),s("strong",[t._v("自定义输入密码，记住后面需要用")]),t._v("）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ openssl genrsa -aes256 -out ca-key.pem 4096\nGenerating RSA private key, 4096 bit long modulus (2 primes)\n......++++\n....................................................................................................++++\ne is 65537 (0x010001)\nEnter pass phrase for ca-key.pem:\nVerifying - Enter pass phrase for ca-key.pem:\n")])])]),s("h3",{attrs:{id:"步骤2-使用ca私钥生成自签名ca证书ca-pem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤2-使用ca私钥生成自签名ca证书ca-pem"}},[t._v("#")]),t._v(" 步骤2:使用CA私钥生成自签名CA证书ca.pem")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("生成证书时，通过-days 365设置证书的有效期。单位为天，默认情况下为30天。有了CA证书后,就可以创建服务器密钥和证书签名请求（CSR）了")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl req -new -x509 -days "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("365")]),t._v(" -key ca-key.pem -sha256 -out ca.pem\n")])])]),s("p",[t._v("例子如下，需要验证密码并输入信息，(其他属性直接回车也没关系,反正也只是自己用的证书)")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("将以下示例中的所有"),s("code",[t._v("$HOST")]),t._v("实例替换为Docker守护程序主机的域名或IP地址")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl req -new -x509 -days "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("365")]),t._v(" -key ca-key.pem -sha256 -out ca.pem\nEnter pass phrase "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ca-key.pem: "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输入上一步设置的密码 回车")]),t._v("\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v(", the field will be left blank.\n-----\nCountry Name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" letter code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AU"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":CN\nState or Province Name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("full name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Some-State"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":BeiJing\nLocality Name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eg, city"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":BeiJing\nOrganization Name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eg, company"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Internet Widgits Pty Ltd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":Docker Inc\nOrganizational Unit Name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eg, section"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":IT Dept\nCommon Name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g. server FQDN or YOUR name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$HOST")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里如果没有域名可以替换成主机IP")]),t._v("\nEmail Address "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":info@ieooc.com\n")])])]),s("h3",{attrs:{id:"生成服务器私钥server-key-pem和证书签名请求server-csr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成服务器私钥server-key-pem和证书签名请求server-csr"}},[t._v("#")]),t._v(" 生成服务器私钥server-key.pem和证书签名请求server-csr")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("CSR:Certificate Signing Request,证书签名请求,server-csr是一个临时文件，生成server-cert.pem以后，可以删除。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("注意这里的"),s("code",[t._v("CN")]),t._v("信息对应的是服务器所在主机域名,如果没有的话也没关系,可以通过下一步的"),s("code",[t._v("extfile.cnf")]),t._v("配置IP地址连接")])]),t._v(" "),s("p",[t._v("第一步，生成服务器私钥server-key.pem")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl genrsa -out server-key.pem "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n")])])]),s("p",[t._v("第二步，使用服务器私钥另加CN信息生成证书签名请求server-csr.pem")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl req -subj "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/CN='),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$HOST")]),t._v('"')]),t._v(" -sha256 -new -key server-key.pem -out server.csr\n")])])]),s("h3",{attrs:{id:"编写extfile-cnf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写extfile-cnf"}},[t._v("#")]),t._v(" 编写"),s("code",[t._v("extfile.cnf")]),t._v(" "),s("Badge",{attrs:{text:"重要",type:"success"}})],1),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("这个文件用于指定下一步生成签名证书的一些属性配置,这里我们主要用到两个属性,如果要其他要求(如限制指定ip范围的客户端才能连接)的可以看"),s("a",{attrs:{href:"https://www.openssl.org/docs/manmaster/man5/x509v3_config.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenSSL x509v3_config文档"),s("OutboundLink")],1)])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("subjectAltName：")]),t._v(" 主题备选名称,是有点像上一步生成server.csr时所用的选项"),s("code",[t._v('-subj "/CN=10.17.1.101"')]),t._v("的东西,这个更像一个说明补充,这里可以填信任的DNS域名和主机IP等等,因为没有域名,所以我只填了Docker服务器的主机IP，另外,需要特别注意,这里对应生成的是一份信任列表,这里所说的信任是对服务端的信任,所以"),s("code",[t._v("填的是服务端的信息")]),t._v("(如域名,IP),我之前看到有文章说这里的列表是客户端的列表,只有在列表中的客户端才能访问服务器,这种说法是错误,在使用证书连接到服务器时,会报错说服务器IP不在信任列表中( 如远程主机ip为ip3,证书的信任列表为ip1和ip2时,若使用该证书访问远程主机,则会报错"),s("code",[t._v("x509: certificate is valid for ip1, ip2, not ip3")]),t._v(")")]),t._v(" "),s("li",[s("strong",[t._v("extendedKeyUsage：")]),t._v(" 扩展密钥用法,此扩展包含一个用法列表，用于指示证书公钥可用于的目的")])]),t._v(" "),s("p",[t._v("由于可以通过IP地址和DNS名称建立TLS连接，因此在创建证书时需要指定IP地址。例如，允许使用10.10.10.20和127.0.0.1进行连接：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" subjectAltName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DNS:"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$HOST")]),t._v(",IP:10.10.10.20,IP:127.0.0.1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" extfile.cnf\n")])])]),s("p",[t._v("将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" extendedKeyUsage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" serverAuth "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" extfile.cnf\n")])])]),s("h3",{attrs:{id:"使用ca证书生成服务器签名证书server-cert-pem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用ca证书生成服务器签名证书server-cert-pem"}},[t._v("#")]),t._v(" 使用CA证书生成服务器签名证书server-cert.pem")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("上面总共生成了两大模块的文件和一个extfile.cnf配置文件,这三部分之间是彼此独立的,到了这一步,也是最后一步才真正做了整合")])]),t._v(" "),s("p",[t._v("这里要用到的有两个文件：")]),t._v(" "),s("ul",[s("li",[t._v("(1)"),s("strong",[t._v("CA私钥ca-key.pem和CA签名文件ca.pem")])]),t._v(" "),s("li",[t._v("(2)"),s("strong",[t._v("证书签名请求server-csr")]),t._v("(3)"),s("strong",[t._v("配置文件extfile.cnf")])])]),t._v(" "),s("p",[t._v("指令如下:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl x509 -req -days "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("365")]),t._v(" -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf\n")])])]),s("p",[t._v("控制台输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Signature ok\nsubject=CN = your.host.com\nGetting CA Private Key\n")])])]),s("p",[t._v("至此,Docker服务端密钥创建完毕。")]),t._v(" "),s("h2",{attrs:{id:"利用ca创建客户端密钥key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用ca创建客户端密钥key"}},[t._v("#")]),t._v(" 利用CA创建客户端密钥key")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("生成密钥需要使用CA私钥和签名文件,为简化流程,避免CA文件在服务端和客户端之间的传输,以下步骤仍在"),s("strong",[t._v("Docker服务端")]),t._v("进行")])]),t._v(" "),s("p",[t._v("创建客户端密钥的过程和服务端类似,CA相关已经创建好了,"),s("code",[t._v("extfile.cnf")]),t._v("配置文件也简单很多,具体如下")]),t._v(" "),s("h3",{attrs:{id:"步骤1-生成客户端私钥key-pem和证书签名请求client-csr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤1-生成客户端私钥key-pem和证书签名请求client-csr"}},[t._v("#")]),t._v(" 步骤1:生成客户端私钥"),s("code",[t._v("key.pem")]),t._v("和证书签名请求"),s("code",[t._v("client-csr")])]),t._v(" "),s("p",[t._v("生成客户端私钥key.pem")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("openssl genrsa -out key.pem "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n")])])]),s("p",[t._v("控制台输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Generating RSA private key, 4096 bit long modulus (2 primes)\n.............................++++\n......................................................................................................................................................++++\ne is 65537 (0x010001)\n")])])]),s("p",[t._v("证书签名请求client-csr")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl req -subj "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/CN=client'")]),t._v(" -new -key key.pem -out client.csr\n")])])]),s("h3",{attrs:{id:"步骤2-编写扩展配置文件extfile-cnf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤2-编写扩展配置文件extfile-cnf"}},[t._v("#")]),t._v(" 步骤2:编写扩展配置文件"),s("code",[t._v("extfile.cnf")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("如果是在刚才创建服务器私钥的文件夹下,应该还有原来的extfile.cnf文件,为避免覆写,可以先执行重命名")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" extfile.cnf extfile.cnf.old\n")])])]),s("p",[t._v("创建扩展配置文件并使密钥适用于客户端身份验证的指令如下:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" extendedKeyUsage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" clientAuth "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" extfile.cnf\n")])])]),s("h3",{attrs:{id:"步骤3-生成签名文件cert-pem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤3-生成签名文件cert-pem"}},[t._v("#")]),t._v(" 步骤3:生成签名文件"),s("code",[t._v("cert.pem")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ openssl x509 -req -days "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("365")]),t._v(" -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  -CAcreateserial -out cert.pem -extfile extfile.cnf\n")])])]),s("p",[t._v("控制台输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Signature ok\nsubject=/CN=client\nGetting CA Private Key\nEnter pass phrase for ca-key.pem: # 输入验证密码 回车\n")])])]),s("h3",{attrs:{id:"修改文件权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改文件权限"}},[t._v("#")]),t._v(" 修改文件权限")]),t._v(" "),s("p",[t._v("步骤1:删除两个证书签名请求文件")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -v client.csr server.csr\n")])])]),s("p",[t._v("步骤2:修改密钥文件权限为只由所有者读取")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" -v 0400 ca-key.pem key.pem server-key.pem\n")])])]),s("p",[t._v("步骤3:修改证书文件权限为只读")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" -v 0444 ca.pem server-cert.pem cert.pem\n")])])]),s("h2",{attrs:{id:"启动docker守护进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动docker守护进程"}},[t._v("#")]),t._v(" 启动Docker守护进程")]),t._v(" "),s("p",[t._v("启动Docker守护进程有两种方法,直接用带参指令或者修改"),s("code",[t._v("daemon.json")]),t._v("配置文件,另外,还有一种方式使用systemctl修改"),s("code",[t._v("docker.service")]),t._v("文件,这种不推荐,这里不作介绍.需要注意的是,不管是哪一种方法,只要对同一属性做了配置,都会导致冲突而启动失败.所以建议只使用一种.")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("监听"),s("code",[t._v("unix:///var/run/docker.sock")]),t._v("是为了实现本机docker直接控制,监听"),s("code",[t._v("tcp://0.0.0.0:2376")]),t._v("表示监听2376端口所有连接,又这里开启了TLS验证,则会根据我们给定的TLS文件去做验证")])]),t._v(" "),s("p",[t._v("服务端需要的TLS文件有"),s("strong",[t._v("CA证书ca.pem")]),t._v(","),s("strong",[t._v("服务端证书server-cert.pem")]),t._v(","),s("strong",[t._v("服务端密钥server-key.pem")])]),t._v(" "),s("p",[t._v("将Docker服务停止，然后修改docker服务文件")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" /usr/lib/systemd/system/docker.service\n")])])]),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("div",{staticClass:"highlighted"},[t._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target firewalld.service containerd.service\nWants=network-online.target\nRequires=docker.socket containerd.service\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\n#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --tlsverify --tlscacert=/opt/docker-ssl/ca.pem --tlscert=/opt/docker-ssl/server-cert.pem --tlskey=/opt/docker-ssl/server-key.pem -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2376\nTimeoutSec=0\nRestartSec=2\nRestart=always\n\n# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.\n# Both the old, and new location are accepted by systemd 229 and up, so using the old location\n# to make them work for either version of systemd.\nStartLimitBurst=3\n\n# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.\n# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make\n# this option work for either version of systemd.\nStartLimitInterval=60s\n\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n\n# Comment TasksMax if your systemd version does not support it.\n# Only systemd 226 and above support this option.\nTasksMax=infinity\n\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\nOOMScoreAdjust=-500\n\n[Install]\nWantedBy=multi-user.target\n')])])]),s("h3",{attrs:{id:"重新加载配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新加载配置"}},[t._v("#")]),t._v(" 重新加载配置")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n")])])]),s("h3",{attrs:{id:"重新启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新启动"}},[t._v("#")]),t._v(" 重新启动")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v("\n")])])]),s("h3",{attrs:{id:"重启后查看服务状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重启后查看服务状态"}},[t._v("#")]),t._v(" 重启后查看服务状态：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ systemctl status docker \n")])])]),s("p",[t._v("控制台输出：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('● docker.service - Docker Application Container Engine\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n     Active: active (running) since Mon 2021-03-01 17:41:53 CST; 5min ago\nTriggeredBy: ● docker.socket\n       Docs: https://docs.docker.com\n   Main PID: 3604191 (dockerd)\n      Tasks: 30\n     Memory: 56.0M\n     CGroup: /system.slice/docker.service\n             ├─3604191 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --tlsverify --tlscacert=/opt/docker-ssl/ca.pem --tlscert=/opt/docker-ssl/server-cert.pem --tlskey=/opt/docker-ssl/server-key.pem -H unix:/>\n             └─3604407 /usr/bin/docker-proxy -proto tcp -host-ip 127.0.0.1 -host-port 1514 -container-ip 172.18.0.2 -container-port 10514\n\nMar 01 17:41:52 harbor dockerd[3604191]: time="2021-03-01T17:41:52.112268091+08:00" level=error msg="failed to start container" container=070eb39f7a00c182e7247b744d66289db8c91d5e762bc5127f68aa8481fc97d9 error="failed to initialize l>\nMar 01 17:41:52 harbor dockerd[3604191]: time="2021-03-01T17:41:52.148018184+08:00" level=error msg="753ed974e6c469f1fb0a40405563aaa9ea39596462fee72bec4f8edc4bcd90f2 cleanup: failed to delete container from containerd: no such conta>\nMar 01 17:41:52 harbor dockerd[3604191]: time="2021-03-01T17:41:52.148052892+08:00" level=error msg="failed to start container" container=753ed974e6c469f1fb0a40405563aaa9ea39596462fee72bec4f8edc4bcd90f2 error="failed to initialize l>\nMar 01 17:41:53 harbor dockerd[3604191]: time="2021-03-01T17:41:53.111270963+08:00" level=info msg="Loading containers: done."\nMar 01 17:41:53 harbor dockerd[3604191]: time="2021-03-01T17:41:53.138717581+08:00" level=info msg="Docker daemon" commit=46229ca graphdriver(s)=overlay2 version=20.10.3\nMar 01 17:41:53 harbor dockerd[3604191]: time="2021-03-01T17:41:53.138839158+08:00" level=info msg="Daemon has completed initialization"\nMar 01 17:41:53 harbor systemd[1]: Started Docker Application Container Engine.\nMar 01 17:41:53 harbor dockerd[3604191]: time="2021-03-01T17:41:53.157523613+08:00" level=info msg="API listen on /run/docker.sock"\nMar 01 17:41:53 harbor dockerd[3604191]: time="2021-03-01T17:41:53.168302054+08:00" level=info msg="API listen on /var/run/docker.sock"\nMar 01 17:41:53 harbor dockerd[3604191]: time="2021-03-01T17:41:53.173756154+08:00" level=info msg="API listen on [::]:2376"\n')])])]),s("p",[t._v("已经生效。")]),t._v(" "),s("h2",{attrs:{id:"使用证书连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用证书连接"}},[t._v("#")]),t._v(" 使用证书连接")]),t._v(" "),s("p",[t._v("复制 "),s("code",[t._v("ca.pem")]),t._v(" , "),s("code",[t._v("cert.pem")]),t._v(" , "),s("code",[t._v("key.pem")]),t._v(" 三个文件到客户端")]),t._v(" "),s("p",[t._v("客户端需要的TLS文件有"),s("strong",[t._v("CA证书ca.pem")]),t._v(","),s("strong",[t._v("客户端证书cert.pem")]),t._v(","),s("strong",[t._v("客户端密钥key.pem")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("将以下示例中的所有"),s("code",[t._v("$HOST")]),t._v("实例替换为Docker守护程序主机的域名或IP地址，连接的指令格式如下,以"),s("code",[t._v("docker --version")]),t._v("为例")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" --tlsverify --tlscacert"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ca.pem --tlscert"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("cert.pem --tlskey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("key.pem -H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$HOST")]),t._v(":2376 --version\n")])])]),s("h2",{attrs:{id:"docker-java-启用tls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-java-启用tls"}},[t._v("#")]),t._v(" docker-java 启用TLS")]),t._v(" "),s("p",[t._v("项目里使用docker的java客户端"),s("code",[t._v("docker-java")]),t._v("调用docker，为了支持TLS，在创建客户端时，需要增加TLS设置。")]),t._v(" "),s("p",[t._v("首先将"),s("code",[t._v("ca.pem cert.pem key.pem")]),t._v("这三个文件拷贝到本地，例如"),s("code",[t._v('E:\\\\docker\\\\"')]),t._v(",")]),t._v(" "),s("p",[t._v("然后"),s("code",[t._v("DefaultDockerClientConfig")]),t._v("里"),s("code",[t._v("withDockerTlsVerify")]),t._v("设为true，并设置"),s("code",[t._v("certpath")]),t._v("为刚拷贝的目录。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CopyDefaultDockerClientConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Builder")]),t._v(" builder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultDockerClientConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDefaultConfigBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withDockerHost")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp://"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('":2375"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withApiVersion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.30"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("containerConfiguration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDockerTlsVerify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                builder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withDockerTlsVerify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("withDockerCertPath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E:\\\\docker\\\\"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DockerClientBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("builder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\n")])])]),s("p",[t._v("大工搞定。")])])}),[],!1,null,null,null);e.default=r.exports}}]);