(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{615:function(s,a,t){"use strict";t.r(a);var e=t(29),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"dockerfile-多阶段构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-多阶段构建"}},[s._v("#")]),s._v(" Dockerfile 多阶段构建")]),s._v(" "),t("h2",{attrs:{id:"之前的做法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#之前的做法"}},[s._v("#")]),s._v(" 之前的做法")]),s._v(" "),t("p",[s._v("在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：")]),s._v(" "),t("h3",{attrs:{id:"全部放入一个-dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全部放入一个-dockerfile"}},[s._v("#")]),s._v(" 全部放入一个 Dockerfile")]),s._v(" "),t("p",[s._v("一种方式是将所有的构建过程编包含在一个 "),t("code",[s._v("Dockerfile")]),s._v(" 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Dockerfile")]),s._v(" 特别长，可维护性降低")]),s._v(" "),t("li",[s._v("镜像层次多，镜像体积较大，部署时间变长")]),s._v(" "),t("li",[s._v("源代码存在泄露的风险")])]),s._v(" "),t("p",[s._v("例如")]),s._v(" "),t("p",[s._v("编写 "),t("code",[s._v("app.go")]),s._v(" 文件，该程序输出 "),t("code",[s._v("Hello World!")])]),s._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" main  \n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fmt"')]),s._v("  \n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("编写 "),t("code",[s._v("Dockerfile.one")]),s._v(" 文件")]),s._v(" "),t("div",{staticClass:"language-docker extra-class"},[t("pre",{pre:!0,attrs:{class:"language-docker"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.9-alpine")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk --no-cache add git ca-certificates")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /go/src/github.com/go/helloworld/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" app.go .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go get -d -v github.com/go-sql-driver/mysql "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && cp /go/src/github.com/go/helloworld/app /root")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./app"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("构建镜像")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t go/helloworld:1 -f Dockerfile.one "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("h3",{attrs:{id:"分散到多个-dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分散到多个-dockerfile"}},[s._v("#")]),s._v(" 分散到多个 Dockerfile")]),s._v(" "),t("p",[s._v("另一种方式，就是我们事先在一个 "),t("code",[s._v("Dockerfile")]),s._v(" 将项目及其依赖库编译测试打包好后，再将其拷贝到运行环境中，这种方式需要我们编写两个 "),t("code",[s._v("Dockerfile")]),s._v(" 和一些编译脚本才能将其两个阶段自动整合起来，这种方式虽然可以很好地规避第一种方式存在的风险，但明显部署过程较复杂。")]),s._v(" "),t("p",[s._v("例如")]),s._v(" "),t("p",[s._v("编写 "),t("code",[s._v("Dockerfile.build")]),s._v(" 文件")]),s._v(" "),t("div",{staticClass:"language-docker extra-class"},[t("pre",{pre:!0,attrs:{class:"language-docker"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.9-alpine")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk --no-cache add git")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /go/src/github.com/go/helloworld")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" app.go .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go get -d -v github.com/go-sql-driver/mysql "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("\n  && CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .")]),s._v("\n")])])]),t("p",[s._v("编写 "),t("code",[s._v("Dockerfile.copy")]),s._v(" 文件")]),s._v(" "),t("div",{staticClass:"language-docker extra-class"},[t("pre",{pre:!0,attrs:{class:"language-docker"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine:latest")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk --no-cache add ca-certificates")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" app .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./app"')]),s._v("]")]),s._v("\n")])])]),t("p",[s._v("新建 "),t("code",[s._v("build.sh")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Building go/helloworld:build\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t go/helloworld:build "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -f Dockerfile.build\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" create --name extract go/helloworld:build\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" extract:/go/src/github.com/go/helloworld/app ./app\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -f extract\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Building go/helloworld:2\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build --no-cache -t go/helloworld:2 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -f Dockerfile.copy\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" ./app\n")])])]),t("p",[s._v("现在运行脚本即可构建镜像")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x build.sh\n\n./build.sh\n")])])]),t("p",[s._v("对比两种方式生成的镜像大小")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" image "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\nREPOSITORY      TAG    IMAGE ID        CREATED         SIZE\ngo/helloworld   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      f7cf3465432c    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" seconds ago  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".47MB\ngo/helloworld   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      f55d3e16affc    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" minutes ago   295MB\n")])])]),t("h2",{attrs:{id:"使用多阶段构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用多阶段构建"}},[s._v("#")]),s._v(" 使用多阶段构建")]),s._v(" "),t("p",[s._v("为解决以上问题，Docker v17.05 开始支持多阶段构建 ("),t("code",[s._v("multistage builds")]),s._v(")。使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个 "),t("code",[s._v("Dockerfile")]),s._v("：")]),s._v(" "),t("p",[s._v("例如")]),s._v(" "),t("p",[s._v("编写 "),t("code",[s._v("Dockerfile")]),s._v(" 文件")]),s._v(" "),t("div",{staticClass:"language-docker extra-class"},[t("pre",{pre:!0,attrs:{class:"language-docker"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.9-alpine "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" builder")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk --no-cache add git")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /go/src/github.com/go/helloworld/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" go get -d -v github.com/go-sql-driver/mysql")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" app.go .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" alpine:latest "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" prod")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apk --no-cache add ca-certificates")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /root/")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("0")])]),s._v(" /go/src/github.com/go/helloworld/app .")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"./app"')]),s._v("]  ")]),s._v("\n")])])]),t("p",[s._v("构建镜像")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build -t go/helloworld:3 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("p",[s._v("对比三个镜像大小")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" image "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\nREPOSITORY        TAG   IMAGE ID         CREATED            SIZE\ngo/helloworld     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("     d6911ed9c846     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" seconds ago      "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".47MB\ngo/helloworld     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     f7cf3465432c     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(" seconds ago     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(".47MB\ngo/helloworld     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     f55d3e16affc     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" minutes ago      295MB\n")])])]),t("p",[s._v("很明显使用多阶段构建的镜像体积小，同时也完美解决了上边提到的问题。")]),s._v(" "),t("h3",{attrs:{id:"只构建某一阶段的镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只构建某一阶段的镜像"}},[s._v("#")]),s._v(" 只构建某一阶段的镜像")]),s._v(" "),t("p",[s._v("我们可以使用 "),t("code",[s._v("as")]),s._v(" 来为某一阶段命名，例如")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" golang:1.9-alpine "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" builder")]),s._v("\n")])])]),t("p",[s._v("例如当我们只想构建 "),t("code",[s._v("builder")]),s._v(" 阶段的镜像时，我们可以在使用 "),t("code",[s._v("docker build")]),s._v(" 命令时加上 "),t("code",[s._v("--target")]),s._v(" 参数即可")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" build --target builder -t username/imagename:tag "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),t("h3",{attrs:{id:"构建时从其他镜像复制文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建时从其他镜像复制文件"}},[s._v("#")]),s._v(" 构建时从其他镜像复制文件")]),s._v(" "),t("p",[s._v("上面例子中我们使用 "),t("code",[s._v("COPY --from=0 /go/src/github.com/go/helloworld/app .")]),s._v(" 从上一阶段的镜像中复制文件，我们也可以复制任意镜像中的文件。")]),s._v(" "),t("div",{staticClass:"language-dockerfile extra-class"},[t("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[t("code",[t("span",{pre:!0,attrs:{class:"token instruction"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token options"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("--from")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("nginx:latest")])]),s._v(" /etc/nginx/nginx.conf /nginx.conf")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);