(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{659:function(t,e,s){"use strict";s.r(e);var _=s(29),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"客户端授权模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端授权模式"}},[t._v("#")]),t._v(" 客户端授权模式")]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0 定义了四种授权方式。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("implicit：简化模式，不推荐使用")])]),t._v(" "),s("li",[s("strong",[t._v("authorization code：授权码模式")])]),t._v(" "),s("li",[s("strong",[t._v("resource owner password credentials：密码模式")])]),t._v(" "),s("li",[s("strong",[t._v("client credentials：客户端模式")])])]),t._v(" "),s("h2",{attrs:{id:"简化模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简化模式"}},[t._v("#")]),t._v(" 简化模式")]),t._v(" "),s("p",[t._v("简化模式适用于纯静态页面应用。所谓纯静态页面应用，也就是应用没有在服务器上执行代码的权限（通常是把代码托管在别人的服务器上），只有前端 JS 代码的控制权。")]),t._v(" "),s("p",[t._v("这种场景下，应用是没有持久化存储的能力的。因此，按照 OAuth2.0 的规定，这种应用是拿不到 Refresh Token 的。其整个授权流程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-01_13-41-37.png",alt:"img"}})]),t._v(" "),s("p",[t._v("该模式下，"),s("code",[t._v("access_token")]),t._v(" 容易泄露且不可刷新")]),t._v(" "),s("p",[s("strong",[t._v("（1）资源拥有者打开客户端，客户端要求资源拥有者给予授权，它将浏览器被重定向到授权服务器，重定向时会附加客户端的身份信息。如：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/authorize?client_id=simplify&response_type=token&scope=server&redirect_uri=https://www.ivoov.com\n")])])]),s("p",[t._v("参数描述同"),s("strong",[t._v("授权码模式")]),t._v(" ，注意"),s("code",[t._v("response_type=token")]),t._v("，说明是简化模式。")]),t._v(" "),s("p",[s("strong",[t._v("（2）浏览器出现向授权服务器授权页面，之后将用户同意授权。")])]),t._v(" "),s("p",[s("strong",[t._v("（3）授权服务器将授权码将令牌（access_token）以Hash的形式存放在重定向uri的fargment中发送给浏览器。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("fragment 主要是用来标识 URI 所标识资源里的某个资源，在 URI 的末尾通过 （#）作为 fragment 的开头，其中 # 不属于 fragment 的值。如https://domain/index#L18这个 URI 中 L18 就是 fragment 的值。大家只需要知道js通过响应浏览器地址栏变化的方式能获取到fragment 就行了。一般来说，简化模式用于没有服务器端的第三方单页面应用，因为没有服务器端就无法接收授权码。")])]),t._v(" "),s("h3",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("浏览器访问认证页面：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("http://localhost:3000/oauth/authorize?client_id=simplify&response_type=token&scope=server&redirect_uri=https://www.ivoov.com\n")])])]),s("p",[s("img",{attrs:{src:"/img/2020-11-15_19-25-47.png",alt:"登录页面"}})]),t._v(" "),s("p",[t._v("然后输入模拟的账号和密码点登陆之后进入授权页面：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-15_19-29-14.png",alt:"授权页面"}})]),t._v(" "),s("p",[t._v("确认授权后，浏览器会重定向到指定路径（oauth_client_details表中的web_server_redirect_uri）并以Hash的形式存放在重定向uri的fargment中,如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.ivoov.com/#access_token=273b7f10-3b4d-495e-9b15-b5bc801ff265&token_type=bearer&expires_in=43199&scope=server\n")])])]),s("h2",{attrs:{id:"授权码模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#授权码模式"}},[t._v("#")]),t._v(" 授权码模式")]),t._v(" "),s("p",[t._v("授权码模式适用于有自己的服务器的应用，它是一个一次性的临时凭证，用来换取 "),s("code",[t._v("access_token")]),t._v(" 和 "),s("code",[t._v("refresh_token")]),t._v("。认证服务器提供了一个类似这样的接口：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/authorize?response_type=code&client_id=ci&scope=server&redirect_uri=https://www.ivoov.com\n")])])]),s("p",[t._v("需要传入 "),s("code",[t._v("code")]),t._v("、"),s("code",[t._v("client_id")]),t._v(" 以及 "),s("code",[t._v("client_secret")]),t._v("。验证通过后，返回 "),s("code",[t._v("access_token")]),t._v(" 和 "),s("code",[t._v("refresh_token")]),t._v("。一旦换取成功，"),s("code",[t._v("code")]),t._v(" 立即作废，不能再使用第二次。流程图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-01_14-10-50.png",alt:"img"}})]),t._v(" "),s("p",[s("strong",[t._v("（1）资源拥有者打开客户端，客户端要求资源拥有者给予授权，它将浏览器被重定向到授权服务器，重定向时会附加客户端的身份信息。如：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/authorize?client_id=simplify&response_type=code&scope=server&redirect_uri=https://www.ivoov.com\n")])])]),s("p",[t._v("参数列表如下：")]),t._v(" "),s("ul",[s("li",[t._v("client_id：客户端准入标识。")]),t._v(" "),s("li",[t._v("response_type：授权码模式固定为code。")]),t._v(" "),s("li",[t._v("scope：客户端权限。")]),t._v(" "),s("li",[t._v("redirect_uri：跳转uri，当授权码申请成功后会跳转到此地址，并在后边带上code参数（授权码）。")])]),t._v(" "),s("p",[s("strong",[t._v("（2）浏览器出现向授权服务器授权页面，之后将用户同意授权。")])]),t._v(" "),s("p",[s("strong",[t._v("（3）授权服务器将授权码（AuthorizationCode）转经浏览器发送给client(通过redirect_uri)。")])]),t._v(" "),s("p",[s("strong",[t._v("（4）客户端拿着授权码向授权服务器索要访问access_token，请求如下：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/token?client_id=simplify&client_secret=secret&grant_type=authorization_code&code=5PgfcD&redirect_uri=https://www.ivoov.com\n")])])]),s("p",[t._v("参数列表如下")]),t._v(" "),s("ul",[s("li",[t._v("client_id：客户端准入标识。")]),t._v(" "),s("li",[t._v("client_secret：客户端秘钥。")]),t._v(" "),s("li",[t._v("grant_type：授权类型，填写authorization_code，表示授权码模式")]),t._v(" "),s("li",[t._v("code：授权码，就是刚刚获取的授权码，注意：授权码只使用一次就无效了，需要重新申请。")]),t._v(" "),s("li",[t._v("redirect_uri：申请授权码时的跳转url，一定和申请授权码时用的redirect_uri一致。")])]),t._v(" "),s("p",[s("strong",[t._v("（5）授权服务器返回令牌(access_token)")])]),t._v(" "),s("p",[t._v("这种模式是四种模式中最安全的一种模式。一般用于client是Web服务器端应用或第三方的原生App调用资源服务的时候。因为在这种模式中access_token不会经过浏览器或移动端的App，而是直接从服务端去交换，这样就最大限度的减小了令牌泄漏的风险。")]),t._v(" "),s("p",[t._v("这个 code 的作用是保护 token 的安全性。上一节说到，简单模式下，token 是不安全的。这是因为在第 4 步当中直接把 token 返回给应用。而这一步容易被拦截、窃听。引入了 code 之后，即使攻击者能够窃取到 code，但是由于他无法获得应用保存在服务器的 "),s("code",[t._v("client_secret")]),t._v("，因此也无法通过 code 换取 token。而第 5 步，为什么不容易被拦截、窃听呢？这是因为，首先，这是一个从服务器到服务器的访问，黑客比较难捕捉到；其次，这个请求通常要求是 https 的实现。即使能窃听到数据包也无法解析出内容。")]),t._v(" "),s("p",[t._v("有了这个 code，token 的安全性大大提高。因此，OAuth2.0 鼓励使用这种方式进行授权，而简单模式则是在不得已情况下才会使用。")]),t._v(" "),s("h3",{attrs:{id:"测试-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-2"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("浏览器访问认证页面：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/authorize?client_id=simplify&response_type=code&scope=server&redirect_uri=https://www.ivoov.com\n")])])]),s("p",[s("img",{attrs:{src:"/img/2020-11-15_19-25-47.png",alt:"登录页面"}})]),t._v(" "),s("p",[t._v("然后输入模拟的账号和密码点登陆之后进入授权页面：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-15_19-29-14.png",alt:"授权页面"}})]),t._v(" "),s("p",[t._v("确认授权后，浏览器会重定向到指定路径（oauth_client_details表中的web_server_redirect_uri）并附加验证码"),s("code",[t._v("?code=hzzmj7")]),t._v("（每次不一样），最后使用该验证码获取token。")]),t._v(" "),s("p",[t._v("使用Postman请求授权服务器。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-15_15-32-12.png",alt:"获取令牌"}})]),t._v(" "),s("h2",{attrs:{id:"密码模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#密码模式"}},[t._v("#")]),t._v(" 密码模式")]),t._v(" "),s("p",[t._v('密码模式中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向 "服务商提供商" 索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分。')]),t._v(" "),s("p",[t._v("一个典型的例子是同一个企业内部的不同产品要使用本企业的 oAuth2.0 体系。在有些情况下，产品希望能够定制化授权页面。由于是同个企业，不需要向用户展示“xxx将获取以下权限”等字样并询问用户的授权意向，而只需进行用户的身份认证即可。这个时候，由具体的产品团队开发定制化的授权界面，接收用户输入账号密码，并直接传递给鉴权服务器进行授权即可。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-01_14-24-25.png",alt:"img"}})]),t._v(" "),s("p",[s("strong",[t._v("（1）资源拥有者将用户名、密码发送给客户端")])]),t._v(" "),s("p",[s("strong",[t._v("（2）客户端拿着资源拥有者的用户名、密码向授权服务器请求令牌（access_token），请求如下：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/token?client_id=simplify&client_secret=simplify&username=admin&grant_type=password&password=123456\n")])])]),s("p",[t._v("参数列表如下：")]),t._v(" "),s("ul",[s("li",[t._v("client_id：客户端准入标识。")]),t._v(" "),s("li",[t._v("client_secret：客户端秘钥。")]),t._v(" "),s("li",[t._v("grant_type：授权类型，填写password表示密码模式")]),t._v(" "),s("li",[t._v("username：资源拥有者用户名。")]),t._v(" "),s("li",[t._v("password：资源拥有者密码。")])]),t._v(" "),s("p",[s("strong",[t._v("（3）授权服务器将令牌（access_token）发送给client")])]),t._v(" "),s("p",[t._v("这种模式十分简单，但是却意味着直接将用户敏感信息泄漏给了client，因此这就说明这种模式只能用于client是我们自己开发的情况下。因此密码模式一般用于我们自己开发的，第一方原生App或第一方单页面应用。")]),t._v(" "),s("p",[t._v("有一点需要特别注意的是，在第 2 步中，认证服务器需要对客户端的身份进行验证，确保是受信任的客户端。")]),t._v(" "),s("h3",{attrs:{id:"测试-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-3"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("使用Postman请求授权服务器。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-15_19-57-33.png",alt:"密码模式"}})]),t._v(" "),s("h2",{attrs:{id:"客户端模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端模式"}},[t._v("#")]),t._v(" 客户端模式")]),t._v(" "),s("p",[t._v("如果信任关系再进一步，或者调用者是一个后端的模块，没有用户界面的时候，可以使用客户端模式。鉴权服务器直接对客户端进行身份验证，验证通过后，返回 token。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-01_14-28-07.png",alt:"img"}})]),t._v(" "),s("p",[s("strong",[t._v("（1）客户端向授权服务器发送自己的身份信息，并请求令牌（access_token）")]),t._v(" "),s("strong",[t._v("（2）确认客户端身份无误后，将令牌（access_token）发送给client，请求如下：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/oauth/token?client_id=simplify&client_secret=simplify&grant_type=client_credentials\n")])])]),s("p",[t._v("参数列表如下：")]),t._v(" "),s("ul",[s("li",[t._v("client_id：客户端准入标识。")]),t._v(" "),s("li",[t._v("client_secret：客户端秘钥。")]),t._v(" "),s("li",[t._v("grant_type：授权类型，填写client_credentials表示客户端模式")])]),t._v(" "),s("p",[t._v("这种模式是最方便但最不安全的模式。因此这就要求我们对client完全的信任，而client本身也是安全的。因此这种模式一般用来提供给我们完全信任的服务器端服务。比如，合作方系统对接，拉取一组用户信息。")]),t._v(" "),s("h3",{attrs:{id:"测试-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-4"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),s("p",[t._v("使用Postman请求授权服务器。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/2020-11-15_20-02-44.png",alt:"密码模式"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);